{"remainingRequest":"/Users/aergul/WORK/EPA_Non-geo_Metadata_Editor/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aergul/WORK/EPA_Non-geo_Metadata_Editor/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/aergul/WORK/EPA_Non-geo_Metadata_Editor/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aergul/WORK/EPA_Non-geo_Metadata_Editor/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/aergul/WORK/EPA_Non-geo_Metadata_Editor/src/App.vue","mtime":1538531962149},{"path":"/Users/aergul/WORK/EPA_Non-geo_Metadata_Editor/node_modules/cache-loader/dist/cjs.js","mtime":1538585838221},{"path":"/Users/aergul/WORK/EPA_Non-geo_Metadata_Editor/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/aergul/WORK/EPA_Non-geo_Metadata_Editor/node_modules/cache-loader/dist/cjs.js","mtime":1538585838221},{"path":"/Users/aergul/WORK/EPA_Non-geo_Metadata_Editor/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"q-layout\",\n    { attrs: { id: \"q-app\" } },\n    [\n      _c(\"EPA\"),\n      _c(\n        \"q-page-container\",\n        [\n          _c(\n            \"q-scroll-area\",\n            {\n              staticStyle: {\n                width: \"100%\",\n                height: \"900px\",\n                \"max-height\": \"100vh\"\n              }\n            },\n            [\n              _c(\n                \"q-jumbotron\",\n                {\n                  attrs: {\n                    dark: \"\",\n                    \"img-src\":\n                      \"https://www.epa.gov/sites/production/files/styles/microsite_banner/public/2018-08/epa-banner-images/banners_xcpp_aug2018.jpg\"\n                  }\n                },\n                [\n                  _c(\"div\", { staticClass: \"q-display-3\" }, [\n                    _vm._v(\"Welcome!\")\n                  ]),\n                  _c(\"div\", { staticClass: \"q-subheading\" }, [\n                    _vm._v(\n                      \"\\n            Welcome to the EPA Open Data Metadata Editor in support of EPA's initiative to make data open, discoverable, and usable.\\n          \"\n                    )\n                  ]),\n                  _c(\"hr\", { staticClass: \"q-hr q-my-lg\" }),\n                  _c(\"div\", [\n                    _vm._v(\n                      \"\\n             This tool allows data owners to author, save, and submit metadata records that are compliant with \"\n                    ),\n                    _c(\n                      \"a\",\n                      {\n                        attrs: {\n                          href:\n                            \"https://www.epa.gov/geospatial/epa-metadata-technical-specification\"\n                        }\n                      },\n                      [_vm._v(\"EPA's Metadata Technical Specification\")]\n                    ),\n                    _vm._v(\n                      \". \\n             Each element has a corresponding status: Mandatory (empty), Optional (empty), Invalid, and Valid. \\n             Additional guidance and best practices are available by clicking each element's status icon. \\n             Use the menu at the lower right to save, load, or submit records or log in as an EPA user. \\n             Please contact the \"\n                    ),\n                    _c(\"a\", { attrs: { href: \"mailto:edg@epa.gov\" } }, [\n                      _vm._v(\"EPA EDG team\")\n                    ]),\n                    _vm._v(\" with any questions.\\n          \")\n                  ])\n                ]\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Title\",\n                      guidance: _vm.getGuidanceFor(\"title\"),\n                      validations: _vm.validations.title,\n                      mandatory: _vm.config[\"title\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"title\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TextInput\", {\n                        attrs: {\n                          defaultText: \"Please enter a title for the dataset\",\n                          userText: _vm.doc.title\n                        },\n                        on: {\n                          \"update:userText\": function($event) {\n                            _vm.$set(_vm.doc, \"title\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Description\",\n                      guidance: _vm.getGuidanceFor(\"description\"),\n                      validations: _vm.validations.description,\n                      mandatory: _vm.config[\"description\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"description\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TextInput\", {\n                        attrs: {\n                          defaultText:\n                            \"Please enter a description for the dataset\",\n                          multiLine: \"\",\n                          userText: _vm.doc.description\n                        },\n                        on: {\n                          \"update:userText\": function($event) {\n                            _vm.$set(_vm.doc, \"description\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Place Keywords\",\n                      guidance: _vm.getGuidanceFor(\"tags_place\"),\n                      validations: _vm.validations.tags_place,\n                      mandatory: _vm.config[\"tags_place\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"tags_place\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TagCollector\", {\n                        attrs: {\n                          collectedTags: _vm.doc.tags_place,\n                          availableTags:\n                            _vm.config[\"tags_place\"][\"availableTags\"]\n                        },\n                        on: {\n                          \"update:collectedTags\": function($event) {\n                            _vm.$set(_vm.doc, \"tags_place\", $event)\n                          },\n                          \"update:availableTags\": function($event) {\n                            _vm.$set(\n                              _vm.config[\"tags_place\"],\n                              \"availableTags\",\n                              $event\n                            )\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"ISO Keywords\",\n                      guidance: _vm.getGuidanceFor(\"tags_iso\"),\n                      validations: _vm.validations.tags_iso,\n                      mandatory: _vm.config[\"tags_iso\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"tags_iso\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TagCollector\", {\n                        attrs: {\n                          collectedTags: _vm.doc.tags_iso,\n                          availableTags: _vm.config[\"tags_iso\"][\"availableTags\"]\n                        },\n                        on: {\n                          \"update:collectedTags\": function($event) {\n                            _vm.$set(_vm.doc, \"tags_iso\", $event)\n                          },\n                          \"update:availableTags\": function($event) {\n                            _vm.$set(\n                              _vm.config[\"tags_iso\"],\n                              \"availableTags\",\n                              $event\n                            )\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"EPA Organization Keywords\",\n                      guidance: _vm.getGuidanceFor(\"epa_org\"),\n                      validations: _vm.validations.epa_org,\n                      mandatory: _vm.config[\"epa_org\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"epa_org\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TagCollector\", {\n                        attrs: {\n                          collectedTags: _vm.doc.epa_org,\n                          availableTags: _vm.config[\"epa_org\"][\"availableTags\"]\n                        },\n                        on: {\n                          \"update:collectedTags\": function($event) {\n                            _vm.$set(_vm.doc, \"epa_org\", $event)\n                          },\n                          \"update:availableTags\": function($event) {\n                            _vm.$set(\n                              _vm.config[\"epa_org\"],\n                              \"availableTags\",\n                              $event\n                            )\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"EPA Theme\",\n                      guidance: _vm.getGuidanceFor(\"tags_epa_theme\"),\n                      validations: _vm.validations.tags_epa_theme,\n                      mandatory: _vm.config[\"tags_epa_theme\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"tags_epa_theme\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TagCollector\", {\n                        attrs: {\n                          collectedTags: _vm.doc.tags_epa_theme,\n                          availableTags:\n                            _vm.config[\"tags_epa_theme\"][\"availableTags\"]\n                        },\n                        on: {\n                          \"update:collectedTags\": function($event) {\n                            _vm.$set(_vm.doc, \"tags_epa_theme\", $event)\n                          },\n                          \"update:availableTags\": function($event) {\n                            _vm.$set(\n                              _vm.config[\"tags_epa_theme\"],\n                              \"availableTags\",\n                              $event\n                            )\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Last Update\",\n                      guidance: _vm.getGuidanceFor(\"modified\"),\n                      validations: _vm.validations.modified,\n                      mandatory: _vm.config[\"modified\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"modified\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"DateOrRangeInput\", {\n                        attrs: { userInput: _vm.doc.modified },\n                        on: {\n                          \"update:userInput\": function($event) {\n                            _vm.$set(_vm.doc, \"modified\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Update Frequency\",\n                      guidance: _vm.getGuidanceFor(\"accrualPeriodicity\"),\n                      validations: _vm.validations.accrualPeriodicity,\n                      mandatory: _vm.config[\"accrualPeriodicity\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"accrualPeriodicity\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"PeriodicityInput\", {\n                        attrs: { userInput: _vm.doc.accrualPeriodicity },\n                        on: {\n                          \"update:userInput\": function($event) {\n                            _vm.$set(_vm.doc, \"accrualPeriodicity\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Publishing Organization\",\n                      guidance: _vm.getGuidanceFor(\"publisher\"),\n                      validations: _vm.validations.publisher,\n                      mandatory: _vm.config[\"publisher\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"publisher\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TextInput\", {\n                        attrs: {\n                          defaultText:\n                            \"Please enter the name of the publishing organization for the dataset\",\n                          userText: _vm.doc.publisher\n                        },\n                        on: {\n                          \"update:userText\": function($event) {\n                            _vm.$set(_vm.doc, \"publisher\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Publisher\",\n                      guidance: _vm.getGuidanceFor(\"contactPoint.fn\"),\n                      validations: _vm.validations.contactPoint.fn,\n                      mandatory: _vm.config.contactPoint.fn[\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations.contactPoint, \"fn\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TextInput\", {\n                        attrs: {\n                          defaultText:\n                            \"Please enter the name of the publisher for the dataset\",\n                          userText: _vm.doc.contactPoint.fn\n                        },\n                        on: {\n                          \"update:userText\": function($event) {\n                            _vm.$set(_vm.doc.contactPoint, \"fn\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Publisher Email\",\n                      guidance: _vm.getGuidanceFor(\"contactPoint.hasEmail\"),\n                      validations: _vm.validations.contactPoint.hasEmail,\n                      mandatory: _vm.config.contactPoint.hasEmail[\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(\n                          _vm.validations.contactPoint,\n                          \"hasEmail\",\n                          $event\n                        )\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TextInput\", {\n                        attrs: {\n                          defaultText:\n                            \"Please enter the email address of the publisher for the dataset\",\n                          userText: _vm.doc.contactPoint.hasEmail\n                        },\n                        on: {\n                          \"update:userText\": function($event) {\n                            _vm.$set(_vm.doc.contactPoint, \"hasEmail\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Identifier\",\n                      guidance: _vm.getGuidanceFor(\"identifier\"),\n                      validations: _vm.validations.identifier,\n                      mandatory: _vm.config[\"identifier\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"identifier\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"DocId\", {\n                        attrs: { userText: _vm.doc.identifier },\n                        on: {\n                          \"update:userText\": function($event) {\n                            _vm.$set(_vm.doc, \"identifier\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Access Level\",\n                      guidance: _vm.getGuidanceFor(\"accessLevel\"),\n                      validations: _vm.validations.accessLevel,\n                      mandatory: _vm.config[\"accessLevel\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"accessLevel\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"OptionSelector\", {\n                        attrs: {\n                          selectedOption: _vm.doc.accessLevel,\n                          availableOptions:\n                            _vm.config[\"accessLevel\"][\"availableOptions\"]\n                        },\n                        on: {\n                          \"update:selectedOption\": function($event) {\n                            _vm.$set(_vm.doc, \"accessLevel\", $event)\n                          },\n                          \"update:availableOptions\": function($event) {\n                            _vm.$set(\n                              _vm.config[\"accessLevel\"],\n                              \"availableOptions\",\n                              $event\n                            )\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Rights\",\n                      guidance: _vm.getGuidanceFor(\"rights\"),\n                      validations: _vm.validations.rights,\n                      mandatory: _vm.doc.accessLevel !== \"public\"\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"rights\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      !_vm.doc.accessLevel || _vm.doc.accessLevel == \"public\"\n                        ? _c(\"TextInput\", {\n                            attrs: {\n                              defaultText: \"Restrictions on the dataset\",\n                              userText: _vm.doc.rights\n                            },\n                            on: {\n                              \"update:userText\": function($event) {\n                                _vm.$set(_vm.doc, \"rights\", $event)\n                              }\n                            }\n                          })\n                        : _c(\"OptionSelector\", {\n                            attrs: {\n                              selectedOption: _vm.doc.rights,\n                              availableOptions:\n                                _vm.config[\"rights\"][\"availableOptions\"]\n                            },\n                            on: {\n                              \"update:selectedOption\": function($event) {\n                                _vm.$set(_vm.doc, \"rights\", $event)\n                              },\n                              \"update:availableOptions\": function($event) {\n                                _vm.$set(\n                                  _vm.config[\"rights\"],\n                                  \"availableOptions\",\n                                  $event\n                                )\n                              }\n                            }\n                          })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Data License\",\n                      guidance: _vm.getGuidanceFor(\"license\"),\n                      validations: _vm.validations.license,\n                      mandatory: _vm.config[\"license\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"license\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TextInput\", {\n                        attrs: {\n                          defaultText: \"URL of the license for the dataset\",\n                          userText: _vm.doc.license\n                        },\n                        on: {\n                          \"update:userText\": function($event) {\n                            _vm.$set(_vm.doc, \"license\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Temporal Extent\",\n                      guidance: _vm.getGuidanceFor(\"temporal\"),\n                      validations: _vm.validations.temporal,\n                      mandatory: _vm.config[\"temporal\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"temporal\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"DateOrRangeInput\", {\n                        attrs: { userInput: _vm.doc.temporal, range: true },\n                        on: {\n                          \"update:userInput\": function($event) {\n                            _vm.$set(_vm.doc, \"temporal\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Release Date\",\n                      guidance: _vm.getGuidanceFor(\"issued\"),\n                      validations: _vm.validations.issued,\n                      mandatory: _vm.config[\"issued\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"issued\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"DateOrRangeInput\", {\n                        attrs: { userInput: _vm.doc.issued },\n                        on: {\n                          \"update:userInput\": function($event) {\n                            _vm.$set(_vm.doc, \"issued\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Language\",\n                      guidance: _vm.getGuidanceFor(\"language\"),\n                      validations: _vm.validations.language,\n                      mandatory: _vm.config[\"language\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"language\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TagCollector\", {\n                        attrs: {\n                          collectedTags: _vm.doc.language,\n                          availableTags:\n                            _vm.config[\"language\"][\"availableTags\"],\n                          maxTagsToShow: _vm.getConfigFor(\n                            \"language\",\n                            \"maxTagsToShow\"\n                          )\n                        },\n                        on: {\n                          \"update:collectedTags\": function($event) {\n                            _vm.$set(_vm.doc, \"language\", $event)\n                          },\n                          \"update:availableTags\": function($event) {\n                            _vm.$set(\n                              _vm.config[\"language\"],\n                              \"availableTags\",\n                              $event\n                            )\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Data Quality\",\n                      guidance: _vm.getGuidanceFor(\"dataQuality\"),\n                      validations: _vm.validations.language,\n                      mandatory: _vm.config[\"dataQuality\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"language\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"BooleanSelector\", {\n                        attrs: { userSelection: _vm.doc.dataQuality },\n                        on: {\n                          \"update:userSelection\": function($event) {\n                            _vm.$set(_vm.doc, \"dataQuality\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Conforms To\",\n                      guidance: _vm.getGuidanceFor(\"conformsTo\"),\n                      validations: _vm.validations.conformsTo,\n                      mandatory: _vm.config[\"conformsTo\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"conformsTo\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TextInput\", {\n                        attrs: {\n                          defaultText: \"Please provide a URL\",\n                          userText: _vm.doc.conformsTo\n                        },\n                        on: {\n                          \"update:userText\": function($event) {\n                            _vm.$set(_vm.doc, \"conformsTo\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Described By\",\n                      guidance: _vm.getGuidanceFor(\"describedBy\"),\n                      validations: _vm.validations.describedBy,\n                      mandatory: _vm.config[\"describedBy\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"describedBy\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TextInput\", {\n                        attrs: {\n                          defaultText: \"Please provide a URL\",\n                          userText: _vm.doc.describedBy\n                        },\n                        on: {\n                          \"update:userText\": function($event) {\n                            _vm.$set(_vm.doc, \"describedBy\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"Landing Page\",\n                      guidance: _vm.getGuidanceFor(\"landingPage\"),\n                      validations: _vm.validations.landingPage,\n                      mandatory: _vm.config[\"landingPage\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"landingPage\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TextInput\", {\n                        attrs: {\n                          defaultText: \"Please provide a URL\",\n                          userText: _vm.doc.landingPage\n                        },\n                        on: {\n                          \"update:userText\": function($event) {\n                            _vm.$set(_vm.doc, \"landingPage\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"q-card\",\n                { staticClass: \"q-ma-sm\" },\n                [\n                  _c(\"ElementHeader\", {\n                    attrs: {\n                      title: \"References\",\n                      guidance: _vm.getGuidanceFor(\"references\"),\n                      validations: _vm.validations.references,\n                      mandatory: _vm.config[\"references\"][\"mandatory\"]\n                    },\n                    on: {\n                      \"update:validations\": function($event) {\n                        _vm.$set(_vm.validations, \"references\", $event)\n                      }\n                    }\n                  }),\n                  _c(\n                    \"q-card-main\",\n                    [\n                      _c(\"TextInput\", {\n                        attrs: {\n                          defaultText: \"Please provide a URL\",\n                          userText: _vm.doc.references\n                        },\n                        on: {\n                          \"update:userText\": function($event) {\n                            _vm.$set(_vm.doc, \"references\", $event)\n                          }\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\"br\"),\n              _c(\"br\"),\n              _c(\"br\"),\n              _c(\"SpeedDial\", { attrs: { doc: _vm.materializeDoc } })\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}